######################## relation definitions
# IDB
client_in(sender, l, t)
client_out(value, l, t)

register(value, l, t)
Next(value, l, t)
######################## end relation definitions


Next(newValue, l, t) :- client_in(_, l, t), register(value, l, t), newValue = (value+1) % 2
register(value, l, t') :- Next(value, l, t), succ(t, t')
register(value, l, t') :- register(value, l, t), succ(t, t'), Â¬Next(value, l, t)
# return the new/current payload
client_out(value, sender, t') :- client_in(sender, l, t), Next(value, l, t), choose(_, t')


# If a client write is arbitrarily partitioned, can it observe inconsistencies?
# This specific implementation excludes identifiers, so the client can't distinguish the order (which sends lead to which writes). In general, the client needs to send some unique value to distinguish (like a count), and there will be data dependencies from that?
# Single client + enough partitions to each take a message = can distinguish (newValue never toggles).
# Change assumption that 1. Multi-writer and 2. Infinite messages? What does this mean in general
# Other cases where single-writer or finite messages break things?


# Hm.
# Similar trigger problem with Paxos (client messages trigger re-election). Paxos outputs don't care if leader elections were triggered though. What does "not caring" look like? Counting quorum in p2b requires that the current proposer be the leader..., so it does matter