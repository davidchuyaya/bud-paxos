# acceptor

######################## relation definitions
# EDB
id(id)
ballotGeq(id1, num1, id2, num2) # true if num1 >= num2 or (num1 = num2 and id1 >= id2)

# IDB
ballots(slot, id, num, l, t) # Assumes starts with 0,0
log(payload, slot, ballotID, ballotNum, l, t)
LogEntryMaxBallotNum(slot, ballotNum, l, t)
LogEntryMaxBallot(slot, ballotID, ballotNum, l, t)
MaxBallotNum(slot, num, l, t)
MaxBallot(slot, id, num, l, t)

# copied from proposer
p1a(proposerID, slot, ballotID, ballotNum, l, t) # proposerID is the location of the proposer
p1b(acceptorID, logSize, slot, ballotID, ballotNum, maxBallotID, maxBallotNum, l, t) # logSize is either 0 or 1
p1bLog(acceptorID, payload, slot, payloadBallotID, payloadBallotNum, ballotID, ballotNum, l, t)
p2a(proposerID, payload, slot, ballotID, ballotNum, l, t) # proposerID is the location of the proposer
p2b(acceptorID, payload, slot, ballotID, ballotNum, maxBallotID, maxBallotNum, l, t)
######################## end relation definitions



ballots(s, i, n, l, t') :- ballots(s, i, n, l, t), succ(t, t')
log(p, slot, ballotID, ballotNum, l, t') :- log(p, slot, ballotID, ballotNum, l, t), succ(t, t')



######################## reply to p1a 
ballots(slot, id, num, l, t) :- p1a(_, slot, id, num, l, t)
MaxBallotNum(slot, max<num>, l, t) :- ballots(slot, _, num, l, t) 
MaxBallot(slot, max<id>, num, l, t) :- MaxBallotNum(slot, num, l, t), ballots(slot, id, num, l, t)
p1b(i, 1, slot, ballotID, ballotNum, maxBallotID, maxBallotNum, proposerID, t') :- p1a(proposerID, ballotID, ballotNum, l, t), log(_, slot, _, _, l, t), id(i), MaxBallot(slot, maxBallotID, maxBallotNum, l, t), choose(_, t')
p1b(i, 0, slot, ballotID, ballotNum, maxBallotID, maxBallotNum, proposerID, t') :- p1a(proposerID, ballotID, ballotNum, l, t), Â¬log(_, slot, _, _, l, t), id(i), MaxBallot(slot, maxBallotID, maxBallotNum, l, t), choose(_, t')

LogEntryMaxBallotNum(slot, max<ballotNum>, l, t) :- log(_, slot, _, ballotNum, l, t)
LogEntryMaxBallot(slot, max<ballotID>, ballotNum, l, t) :- LogEntryMaxBallotNum(slot, ballotNum, l, t), log(_, slot, ballotID, ballotNum, l, t)

p1bLog(i, payload, slot, payloadBallotID, payloadBallotNum, ballotID, ballotNum, proposerID, t') :- id(i), log(payload, slot, payloadBallotID, payloadBallotNum, l, t), LogEntryMaxBallot(slot, payloadBallotID, payloadBallotNum, l, t), p1a(proposerID, slot, ballotID, ballotNum, l, t), choose(_, t')
######################## end reply to p1a 



######################## reply to p2a
ballots(slot, id, num, l, t) :- p2a(_, _, slot, id, num, l, t) 
# Any rule that uses MaxBallot is guaranteed to only run once all ballots have been processed
log(payload, slot, ballotID, ballotNum, l, t) :- p2a(_, payload, slot, ballotID, ballotNum, l, t), MaxBallot(slot, maxID, maxNum, l, t), ballotGeq(ballotID, ballotNum, maxID, maxNum)
p2b(i, payload, slot, ballotID, ballotNum, maxBallotID, maxBallotNum, proposerID, t') :- p2a(proposerID, payload, slot, ballotID, ballotNum, l, t), id(i), MaxBallot(slot, maxBallotID, maxBallotNum, l, t), choose(_, t')
######################## end reply to p2a